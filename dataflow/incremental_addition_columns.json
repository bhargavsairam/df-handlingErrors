{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Emp_dataset",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "EmpSource",
						"type": "DatasetReference"
					},
					"name": "EmployeeSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText3",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select1"
				},
				{
					"name": "union1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmpId as string,",
				"          EmpName as string,",
				"          EmpState as string,",
				"          EmpNumber as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          EmpName as string,",
				"          Gender as string,",
				"          EmpNumber as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> EmployeeSource",
				"source1 derive(Dummy = 'dummy') ~> derivedColumn1",
				"derivedColumn1 aggregate(groupBy(Dummy),",
				"     EmpId = max(EmpId)) ~> aggregate1",
				"aggregate1, EmployeeSource join(1 == 1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 keyGenerate(output(new_Id as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(EmpId = toString(toInteger(EmpId)+ toInteger(new_Id))) ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          EmpId,",
				"          EmpName,",
				"          Gender,",
				"          EmpNumber",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"source1, select1 union(byName: true)~> union1",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}